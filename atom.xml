<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://near2sea.github.io/"/>
  <updated>2019-01-09T02:40:22.818Z</updated>
  <id>https://near2sea.github.io/</id>
  
  <author>
    <name>near2sea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ios搭建项目脚手架</title>
    <link href="https://near2sea.github.io/2019/01/09/ios%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>https://near2sea.github.io/2019/01/09/ios搭建项目脚手架/</id>
    <published>2019-01-09T02:32:20.000Z</published>
    <updated>2019-01-09T02:40:22.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用carthage"><a href="#使用carthage" class="headerlink" title="使用carthage"></a>使用carthage</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install carthage</span><br><span class="line"># 项目根目录下</span><br><span class="line">touch Cartfile</span><br><span class="line"># 下载源码生成framework</span><br><span class="line">carthage update</span><br><span class="line">carthage update --platform ios</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>打开 Build Phases 选项卡. 点击 + 添加，选择 New Run Script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/carthage copy-frameworks</span><br></pre></td></tr></table></figure></li><li><p>在input Files项添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework</span><br></pre></td></tr></table></figure></li><li><p>在Output Files项添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Alamofire.framework</span><br></pre></td></tr></table></figure></li></ul><h2 id="Cartfile配置"><a href="#Cartfile配置" class="headerlink" title="Cartfile配置"></a>Cartfile配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">github &quot;near2sea/Mantle&quot; &quot;feature/near2sea&quot; #扩展Mantle代替github &quot;Mantle/Mantle&quot;</span><br><span class="line"></span><br><span class="line">github &quot;near2sea/YTKNetwork&quot; &quot;feature/near2sea&quot; #优化项目代替github &quot;yuantiku/YTKNetwork&quot; ~&gt; 2.0</span><br><span class="line"></span><br><span class="line">github &quot;near2sea/XLForm&quot; &quot;feature/datasource&quot; #扩展xlform代替github &quot;xmartlabs/XLForm&quot; ~&gt; 4.0</span><br><span class="line"></span><br><span class="line">github &quot;jdg/MBProgressHUD&quot; ~&gt; 1.1.0</span><br><span class="line"></span><br><span class="line">github &quot;SVProgressHUD/SVProgressHUD&quot;</span><br><span class="line"></span><br><span class="line">github &quot;ibireme/YYCache&quot;</span><br><span class="line"></span><br><span class="line">github &quot;ibireme/YYCategories&quot;</span><br><span class="line"></span><br><span class="line">github &quot;layoutBox/FlexLayout&quot; #把yoga打包成framework,build Settings选项卡Always Embed Swift Standard Libraries属性设置为YES</span><br><span class="line"></span><br><span class="line">github &quot;airbnb/lottie-ios&quot; &quot;master&quot;</span><br><span class="line"></span><br><span class="line">## 可选</span><br><span class="line">github &quot;WenchaoD/FSCalendar&quot;</span><br><span class="line"></span><br><span class="line">github &quot;hackiftekhar/IQKeyboardManager&quot;</span><br><span class="line"></span><br><span class="line">github &quot;Ramotion/circle-menu&quot;</span><br><span class="line"></span><br><span class="line">github &quot;MortimerGoro/MGSwipeTableCell&quot; #cell左右滑动</span><br><span class="line"></span><br><span class="line">github &quot;chiahsien/CHTCollectionViewWaterfallLayout&quot; #类似瀑布流</span><br><span class="line"></span><br><span class="line">github &quot;realm/realm-cocoa&quot;</span><br><span class="line"></span><br><span class="line">## swift</span><br><span class="line">github &quot;ReactiveX/RxSwift&quot; ~&gt; 4.0</span><br><span class="line"></span><br><span class="line">github &quot;Alamofire/Alamofire&quot; &quot;5.0.0.beta.1&quot;</span><br></pre></td></tr></table></figure><h1 id="使用pod"><a href="#使用pod" class="headerlink" title="使用pod"></a>使用pod</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;YogaKit&apos;, &apos;~&gt; 1.7&apos; #需加入libc++.tbd,已加FlexLayout则不需要</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用carthage&quot;&gt;&lt;a href=&quot;#使用carthage&quot; class=&quot;headerlink&quot; title=&quot;使用carthage&quot;&gt;&lt;/a&gt;使用carthage&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="ios" scheme="https://near2sea.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>xcode通用代码片段</title>
    <link href="https://near2sea.github.io/2019/01/07/xcode%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>https://near2sea.github.io/2019/01/07/xcode通用代码片段/</id>
    <published>2019-01-07T06:29:49.000Z</published>
    <updated>2019-01-07T06:42:01.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用于xcode使用的ios通用代码片段"><a href="#用于xcode使用的ios通用代码片段" class="headerlink" title="用于xcode使用的ios通用代码片段"></a>用于xcode使用的ios通用代码片段</h1><ul><li><a href="https://github.com/QMUI/QMUI_iOS_CodeSnippets" target="_blank" rel="noopener">https://github.com/QMUI/QMUI_iOS_CodeSnippets</a></li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>Xcode 的 Code Snippets 文件存放于 ~/Library/Developer/Xcode/UserData/CodeSnippets 目录，只要直接把 *.codesnippets 文件放到这个目录下（若没有则自己创建），重启 Xcode 即可生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Library/Developer/Xcode/UserData/CodeSnippets</span><br><span class="line">git clone https://github.com/QMUI/QMUI_iOS_CodeSnippets.git ./</span><br></pre></td></tr></table></figure><h2 id="快捷键汇总"><a href="#快捷键汇总" class="headerlink" title="快捷键汇总"></a>快捷键汇总</h2><ul><li><code>propertySwizzleWeak</code> - 用 <code>swizzle</code> 的方式定义一个 <code>weak</code> 的property</li><li><p><code>sharedInstance</code> - 为当前类创建一个实现单例功能的 <code>sharedInstance</code> 方法</p></li><li><p><code>block*</code> - block相关</p></li><li><code>pragma</code> - 展开一个用于 Xcode 导航的 #pragma mark - 宏</li><li><code>__weakSelf</code> - 定义一个 weak 的 self 指针</li><li><code>timeConsuming</code> - 展开一段用 <code>CACurrentMediaTime()</code> 来计算方法耗时的代码</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用于xcode使用的ios通用代码片段&quot;&gt;&lt;a href=&quot;#用于xcode使用的ios通用代码片段&quot; class=&quot;headerlink&quot; title=&quot;用于xcode使用的ios通用代码片段&quot;&gt;&lt;/a&gt;用于xcode使用的ios通用代码片段&lt;/h1&gt;&lt;ul&gt;

      
    
    </summary>
    
      <category term="前端" scheme="https://near2sea.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ios" scheme="https://near2sea.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>ios小结presentViewController延迟问题</title>
    <link href="https://near2sea.github.io/2019/01/05/ios%E5%B0%8F%E7%BB%93presentViewController%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://near2sea.github.io/2019/01/05/ios小结presentViewController延迟问题/</id>
    <published>2019-01-05T09:17:23.000Z</published>
    <updated>2019-01-05T09:23:08.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS小结-解决presentViewController延迟问题"><a href="#iOS小结-解决presentViewController延迟问题" class="headerlink" title="iOS小结(解决presentViewController延迟问题)"></a>iOS小结(解决presentViewController延迟问题)</h1><p>在 iOS 中，当使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(void)presentViewController:(UIViewController*)viewControllerToPresent animated:(BOOL)flag completion:(void (^__nullable)(void))completion</span><br></pre></td></tr></table></figure><p>方法进行界面跳转的时候，有时候会出现延迟，这个延迟有时候会有好几秒的时间才会执行 completion，有时候干脆就一直不会跳转。</p><ul><li>由于某种原因，<code>presentViewController</code>跳转时completion的内容并不会真的马上触发执行，除非有一个主线程事件触发这种消费。比如在弹出慢的时候，你随便点击一下屏幕，马上就能弹出来</li></ul><p>所以得出相应的解决方法：</p><p>1.在主线程中执行跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(dispatch_get_main_queue(), ^(void)&#123;</span><br><span class="line">            [currentVC presentViewController:presentVC animated:YES completion:^&#123;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>2.在执行跳转前唤醒主线程,<code>WakeUpMainThread</code>方法它的作用只是唤醒主线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self performSelectorOnMainThread:@selector(WakeUpMainThread) withObject:nil waitUntilDone:NO];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iOS小结-解决presentViewController延迟问题&quot;&gt;&lt;a href=&quot;#iOS小结-解决presentViewController延迟问题&quot; class=&quot;headerlink&quot; title=&quot;iOS小结(解决presentViewControl
      
    
    </summary>
    
      <category term="前端" scheme="https://near2sea.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ios" scheme="https://near2sea.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>css技巧与经验</title>
    <link href="https://near2sea.github.io/2018/12/20/css%E6%8A%80%E5%B7%A7%E4%B8%8E%E7%BB%8F%E9%AA%8C/"/>
    <id>https://near2sea.github.io/2018/12/20/css技巧与经验/</id>
    <published>2018-12-20T04:20:16.000Z</published>
    <updated>2018-12-20T04:21:54.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css使用技巧与经验"><a href="#css使用技巧与经验" class="headerlink" title="css使用技巧与经验"></a>css使用技巧与经验</h2><ul><li><a href="https://www.css88.com/book/css/experience/skill.htm" target="_blank" rel="noopener">https://www.css88.com/book/css/experience/skill.htm</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;css使用技巧与经验&quot;&gt;&lt;a href=&quot;#css使用技巧与经验&quot; class=&quot;headerlink&quot; title=&quot;css使用技巧与经验&quot;&gt;&lt;/a&gt;css使用技巧与经验&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.css88.com/b
      
    
    </summary>
    
      <category term="前端" scheme="https://near2sea.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://near2sea.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://near2sea.github.io/2018/12/18/hello-world/"/>
    <id>https://near2sea.github.io/2018/12/18/hello-world/</id>
    <published>2018-12-18T00:51:39.402Z</published>
    <updated>2018-12-18T00:51:39.402Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>zsh环境安装</title>
    <link href="https://near2sea.github.io/2018/12/15/zshhuan-jing-an-zhuang/"/>
    <id>https://near2sea.github.io/2018/12/15/zshhuan-jing-an-zhuang/</id>
    <published>2018-12-15T03:19:54.000Z</published>
    <updated>2018-12-18T01:21:27.416Z</updated>
    
    <content type="html"><![CDATA[<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><ul><li>安装地址: <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4>1.clone项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><p>2.备份原来的 <code>~/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure><p>3.创建新的zsh配置文件，直接从项目模板文件复制过来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><p>4.设置系统默认shell环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>5.打开新的命令窗口，它已经加载Oh My Zsh的配置。</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><ul><li>powerlevel9k (<a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">https://github.com/bhilburn/powerlevel9k</a>)</li><li>安装 Powerlevel9k 主题</li></ul><p>1.Clone项目到OMZ的<code>custom/themes</code>目录.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>2.在<code>~/.zshrc</code>中设置主题<br><figure class="highlight bash"><figcaption><span>.zshrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></span><br></pre></td></tr></table></figure></p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li>安装Powerline字体 (<a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">https://github.com/powerline/fonts</a>)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone 项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="comment"># 执行根目录下install.sh安装</span></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="comment"># 卸载时删掉目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rm -rf fonts</span><br></pre></td></tr></table></figure><ul><li>安装Awesome-Powerline Fonts字体 (<a href="https://github.com/gabrielelana/awesome-terminal-fonts" target="_blank" rel="noopener">https://github.com/gabrielelana/awesome-terminal-fonts</a>)<ol><li>参考系统字体安装 <a href="https://github.com/gabrielelana/awesome-terminal-fonts/wiki/OS-X" target="_blank" rel="noopener">https://github.com/gabrielelana/awesome-terminal-fonts/wiki/OS-X</a></li><li>复制所有<code>./build</code>目录下的 <code>*.sh</code> 文件到<code>~/.fonts</code>目录</li><li>在<code>~/.zshrc</code>文件上添加<code>source ~/.fonts/*.sh</code></li><li>在<code>~/.zshrc</code>文件上添加<code>POWERLEVEL9K_MODE=&#39;awesome-fontconfig&#39;</code></li></ol></li></ul><figure class="highlight bash"><figcaption><span>./zshrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.fonts/*.sh</span><br><span class="line">POWERLEVEL9K_MODE=<span class="string">'awesome-fontconfig'</span></span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></span><br></pre></td></tr></table></figure><img src="/images/2018/zsh/shell.png" class="fancybox"><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li>zsh-autosuggestions (<a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-autosuggestions</a>)</li></ul><p>1.clone项目<code>$ZSH_CUSTOM/plugins</code> (默认地址 ~/.oh-my-zsh/custom/plugins)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>2.把插件加入到Oh My Zsh的插件注册表(修改 <code>~/.zshrc</code>, 每次修改完 <code>.zshrc</code>文件都需要<code>source .zshrc</code>)</p><figure class="highlight bash"><figcaption><span>.zshrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(zsh-autosuggestions)</span><br></pre></td></tr></table></figure><p>3.打开新shell窗口</p><ul><li>autojump (<a href="https://github.com/wting/autojump" target="_blank" rel="noopener">https://github.com/wting/autojump</a>)</li></ul><p>1.clone项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/wting/autojump.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/autojump</span><br></pre></td></tr></table></figure><p>2.执行安装脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py or ./uninstall.py</span><br></pre></td></tr></table></figure></p><p>3.执行完装脚本后之后把提示路径加到<code>./zshrc</code>文件中</p><ul><li>zsh-syntax-highlighting (<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-syntax-highlighting</a>)</li></ul><p>1.clone项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>2.加到插件列表</p><figure class="highlight bash"><figcaption><span>.zshrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=( [plugins...] zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><p>3.执行 Source <code>~/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>####VScode中配置</p><ul><li>vscode环境中打开设置(<code>command+,</code>),设置终端字体<figure class="highlight"><figcaption><span>settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"terminal.integrated.fontFamily": "'Meslo LG M DZ for Powerline'" //终端样式</span><br></pre></td></tr></table></figure></li></ul><h4 id="常用命令使用"><a href="#常用命令使用" class="headerlink" title="常用命令使用"></a>常用命令使用</h4><ul><li><code>history</code> 查询历史使用命令</li><li><code>j folder</code> 快速跳转到文件夹</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;oh-my-zsh&quot;&gt;&lt;a href=&quot;#oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;oh-my-zsh&quot;&gt;&lt;/a&gt;oh-my-zsh&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装地址: &lt;a href=&quot;https://github.com/ro
      
    
    </summary>
    
      <category term="工具" scheme="https://near2sea.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>手机端调试H5</title>
    <link href="https://near2sea.github.io/2018/12/07/shou-ji-duan-diao-shi-h5/"/>
    <id>https://near2sea.github.io/2018/12/07/shou-ji-duan-diao-shi-h5/</id>
    <published>2018-12-07T10:26:33.000Z</published>
    <updated>2018-12-18T00:51:39.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS调试h5"><a href="#iOS调试h5" class="headerlink" title="iOS调试h5"></a>iOS调试h5</h2><ol><li>打开苹果手机<strong>web 检查器</strong>(设置 &gt; Safari浏览器 &gt; 高级 Web检查器),一般情况下默认是开启的</li><li>打开Mac 上的<strong>Safari</strong>的<strong>开发</strong>菜单</li><li>在Mac Aafari浏览器中选择调试页面(开发菜单 &gt; iphone &gt; 对应页面地址)</li><li>点击地址后弹出控制台，方便调试页面的元素、网络请求等</li></ol><h2 id="Android调试h5"><a href="#Android调试h5" class="headerlink" title="Android调试h5"></a>Android调试h5</h2><ul><li>手机打开usb调试模式，确保手机连上电脑, 打开chrome浏览器，输入<code>chrome://inspect</code>，远程调试页面</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iOS调试h5&quot;&gt;&lt;a href=&quot;#iOS调试h5&quot; class=&quot;headerlink&quot; title=&quot;iOS调试h5&quot;&gt;&lt;/a&gt;iOS调试h5&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;打开苹果手机&lt;strong&gt;web 检查器&lt;/strong&gt;(设置 &amp;gt; Safar
      
    
    </summary>
    
      <category term="h5" scheme="https://near2sea.github.io/categories/h5/"/>
    
    
  </entry>
  
  <entry>
    <title>Vscode设置</title>
    <link href="https://near2sea.github.io/2018/11/30/vscodeshe-zhi/"/>
    <id>https://near2sea.github.io/2018/11/30/vscodeshe-zhi/</id>
    <published>2018-11-30T06:22:40.000Z</published>
    <updated>2019-06-24T01:43:45.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode开发工具设置"><a href="#vscode开发工具设置" class="headerlink" title="vscode开发工具设置"></a>vscode开发工具设置</h2><ul><li><p>快捷键 <code>command + ,</code> 打开设置，右上角打开 <em>settings.json</em></p><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"workbench.iconTheme"</span>: <span class="string">"material-icon-theme"</span>,</span><br><span class="line">  <span class="attr">"materialTheme.fixIconsRunning"</span>: <span class="literal">false</span>,</span><br><span class="line">  "editor.fontSize": 16, // 字体大小</span><br><span class="line">  // 以下是代码格式化配置</span><br><span class="line">  "editor.formatOnSave": true, // 每次保存的时候自动格式化</span><br><span class="line">  "editor.tabSize": 2, // 代码缩进修改成2个空格</span><br><span class="line">  "eslint.autoFixOnSave": false, // 每次保存的时候将代码按eslint格式进行修复</span><br><span class="line">  "prettier.eslintIntegration": true, // 让prettier使用eslint的代码格式进行校验</span><br><span class="line">  "prettier.semi": false, // 去掉代码结尾的分号</span><br><span class="line">  "prettier.singleQuote": true, // 使用带引号替代双引号</span><br><span class="line">  "javascript.format.insertSpaceBeforeFunctionParenthesis": true, // 让函数(名)和后面的括号之间加个空格</span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html", //格式化.vue中html</span><br><span class="line">  "vetur.format.defaultFormatter.js": "vscode-typescript", //让vue中的js按编辑器自带的ts格式进行格式化</span><br><span class="line">  "vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">    "js-beautify-html": &#123;</span><br><span class="line">      "wrap_attributes": "force-aligned" //属性强制折行对齐</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "eslint.validate": [</span><br><span class="line">    //开启对.vue文件中错误的检查</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "window.zoomLevel": 0,</span><br><span class="line">  "editor.snippetSuggestions": "top",</span><br><span class="line">  "editor.formatOnPaste": true,</span><br><span class="line">  "explorer.confirmDelete": false,</span><br><span class="line">  "todo-tree.defaultHighlight": &#123;</span><br><span class="line">    "foreground": "green",</span><br><span class="line">    "type": "none"</span><br><span class="line">  &#125;,</span><br><span class="line">  "todo-tree.customHighlight": &#123;</span><br><span class="line">    "TODO": &#123;&#125;,</span><br><span class="line">    "FIXME": &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "git.autofetch": true,</span><br><span class="line">  "terminal.integrated.fontFamily": "'Meslo LG M DZ for Powerline'" //终端样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开工具栏 <em>Code -&gt; 用户代码片段</em>, 新件vue模板, <em>vue.json</em>, 在vue文件中，键入<code>vue</code>，按下<code>tab</code>键快速生成模板</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Print to console"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"vue"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">      <span class="string">"&lt;template&gt;"</span>,</span><br><span class="line">      <span class="string">"  &lt;div class=\"wrapper\"&gt;$0&lt;/div&gt;"</span>,</span><br><span class="line">      <span class="string">"&lt;/template&gt;"</span>,</span><br><span class="line">      <span class="string">""</span>,</span><br><span class="line">      <span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">      <span class="string">"export default &#123;"</span>,</span><br><span class="line">      <span class="string">"  components: &#123;&#125;,"</span>,</span><br><span class="line">      <span class="string">"  props: &#123;&#125;,"</span>,</span><br><span class="line">      <span class="string">"  data () &#123;"</span>,</span><br><span class="line">      <span class="string">"    return &#123;"</span>,</span><br><span class="line">      <span class="string">"    &#125;"</span>,</span><br><span class="line">      <span class="string">"  &#125;,"</span>,</span><br><span class="line">      <span class="string">"  watch: &#123;&#125;,"</span>,</span><br><span class="line">      <span class="string">"  computed: &#123;&#125;,"</span>,</span><br><span class="line">      <span class="string">"  methods: &#123;&#125;,"</span>,</span><br><span class="line">      <span class="string">"  created () &#123; &#125;,"</span>,</span><br><span class="line">      <span class="string">"  mounted () &#123; &#125;"</span>,</span><br><span class="line">      <span class="string">"&#125;"</span>,</span><br><span class="line">      <span class="string">"&lt;/script&gt;"</span>,</span><br><span class="line">      <span class="string">"&lt;style lang=\"scss\" scoped&gt;"</span>,</span><br><span class="line">      <span class="string">".wrapper &#123;"</span>,</span><br><span class="line">      <span class="string">"&#125;"</span>,</span><br><span class="line">      <span class="string">"&lt;/style&gt;"</span>,</span><br><span class="line">      <span class="string">"$2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"A vue file template"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="vscode工具设置"><a href="#vscode工具设置" class="headerlink" title="vscode工具设置"></a>vscode工具设置</h2><ul><li><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Create Model Class"</span>: &#123;</span><br><span class="line"><span class="attr">"scope"</span>: <span class="string">"dart"</span>,</span><br><span class="line"><span class="attr">"prefix"</span>: <span class="string">"modelClass"</span>,</span><br><span class="line"><span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"import 'package:json_annotation/json_annotation.dart';"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"part '$&#123;TM_FILENAME/(.*)\\.dart$/$&#123;1&#125;/gi&#125;.g.dart';"</span>,</span><br><span class="line"><span class="string">"@JsonSerializable()"</span>,</span><br><span class="line"><span class="string">"class $&#123;TM_FILENAME_BASE/\\w*/$&#123;0:/capitalize&#125;/&#125; &#123;"</span>,</span><br><span class="line"><span class="string">"  $&#123;1:@JsonKey(name: \"tarball_url\")&#125;"</span>,</span><br><span class="line"><span class="string">"  $&#123;2:String name;&#125;"</span>,</span><br><span class="line"><span class="string">"  $&#123;TM_FILENAME_BASE/\\w*/$&#123;0:/capitalize&#125;/&#125;($&#123;3:this.name&#125;);"</span>,</span><br><span class="line"><span class="string">"  factory $&#123;TM_FILENAME_BASE/\\w*/$&#123;0:/capitalize&#125;/&#125;.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$&#123;TM_FILENAME_BASE/\\w*/$&#123;0:/capitalize&#125;/&#125;FromJson(json);"</span>,</span><br><span class="line"><span class="string">"  Map&lt;String, dynamic&gt; toJson() =&gt; _$$&#123;TM_FILENAME_BASE/\\w*/$&#123;0:/capitalize&#125;/&#125;ToJson(this);"</span>,</span><br><span class="line"><span class="string">"&#125;"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"Dart Create Model Class"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="vscode快捷键使用"><a href="#vscode快捷键使用" class="headerlink" title="vscode快捷键使用"></a>vscode快捷键使用</h2><ul><li><code>command+K command+Q</code> 快速定位最后一次文件修改的地方</li><li><code>command+K command+S</code> 快捷键映射列表</li><li><code>command+P</code> 转到文件</li><li>ctrl + ` 打开终端</li><li><code>command+shift+O</code> 转到文件中的符号</li><li><code>command+B</code> 隐藏或显示侧边栏</li><li><code>command+shift+剪头右</code> 选择光标后的文字</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vscode开发工具设置&quot;&gt;&lt;a href=&quot;#vscode开发工具设置&quot; class=&quot;headerlink&quot; title=&quot;vscode开发工具设置&quot;&gt;&lt;/a&gt;vscode开发工具设置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;快捷键 &lt;code&gt;command + ,&lt;/code&gt; 打开设置，右上角打开 &lt;em&gt;settings.json&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://near2sea.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>img标签src引用网络图片不显示</title>
    <link href="https://near2sea.github.io/2018/11/27/imgbiao-qian-srcyin-yong-wang-luo-tu-pian-bu-xian-shi/"/>
    <id>https://near2sea.github.io/2018/11/27/imgbiao-qian-srcyin-yong-wang-luo-tu-pian-bu-xian-shi/</id>
    <published>2018-11-27T12:29:26.000Z</published>
    <updated>2018-12-18T00:51:39.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在src中引用网络图片无法显示，这因为在引用链接时-浏览器对地址发起请求加上了refre这个请求头-而有些服务器能根据refre反盗所以引用失败返回403。"><a href="#在src中引用网络图片无法显示，这因为在引用链接时-浏览器对地址发起请求加上了refre这个请求头-而有些服务器能根据refre反盗所以引用失败返回403。" class="headerlink" title="在src中引用网络图片无法显示，这因为在引用链接时,浏览器对地址发起请求加上了refre这个请求头,而有些服务器能根据refre反盗所以引用失败返回403。"></a>在src中引用网络图片无法显示，这因为在引用链接时,浏览器对地址发起请求加上了refre这个请求头,而有些服务器能根据refre反盗所以引用失败返回403。</h3><p>解决方法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在src中引用网络图片无法显示，这因为在引用链接时-浏览器对地址发起请求加上了refre这个请求头-而有些服务器能根据refre反盗所以引用失败返回403。&quot;&gt;&lt;a href=&quot;#在src中引用网络图片无法显示，这因为在引用链接时-浏览器对地址发起请求加上了ref
      
    
    </summary>
    
      <category term="h5" scheme="https://near2sea.github.io/categories/h5/"/>
    
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="https://near2sea.github.io/2018/11/14/gitming-ling/"/>
    <id>https://near2sea.github.io/2018/11/14/gitming-ling/</id>
    <published>2018-11-14T06:37:28.000Z</published>
    <updated>2018-12-18T00:51:39.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><ul><li>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、新建代码库&quot;&gt;&lt;a href=&quot;#一、新建代码库&quot; class=&quot;headerlink&quot; title=&quot;一、新建代码库&quot;&gt;&lt;/a&gt;一、新建代码库&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在当前目录新建一个Git代码库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新建一个目录，将其初始化为Git代码库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init [project-name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载一个项目和它的整个代码历史&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; [url]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="git" scheme="https://near2sea.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云移动平台集成</title>
    <link href="https://near2sea.github.io/2018/11/08/a-li-yun-yi-dong-ping-tai-ji-cheng/"/>
    <id>https://near2sea.github.io/2018/11/08/a-li-yun-yi-dong-ping-tai-ji-cheng/</id>
    <published>2018-11-08T04:00:12.000Z</published>
    <updated>2018-12-18T00:51:39.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动数据分析"><a href="#移动数据分析" class="headerlink" title="移动数据分析"></a>移动数据分析</h2><ul><li>获取<a href="https://github.com/aliyun/alicloud-ios-demo" target="_blank" rel="noopener">alicloud-ios-demo</a>工程源码例子</li><li><p>参考<a href="https://help.aliyun.com/document_detail/30035.html" target="_blank" rel="noopener">移动数据分析API文档</a></p></li><li><p>代码示例</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ALBBMANPageHitBuilder *pageHitBuilder = [[ALBBMANPageHitBuilder alloc] init];</span><br><span class="line">// 设置页面refer</span><br><span class="line">[pageHitBuilder setReferPage:@&quot;pageRefer&quot;];</span><br><span class="line">// 设置页面名称</span><br><span class="line">[pageHitBuilder setPageName:@&quot;pageName&quot;];</span><br><span class="line">// 设置页面停留时间</span><br><span class="line">[pageHitBuilder setDurationOnPage:100];</span><br><span class="line">// 设置页面事件扩展参数</span><br><span class="line">[pageHitBuilder setProperty:@&quot;pagePropertyKey1&quot; value:@&quot;pagePropertyValue1&quot;];</span><br><span class="line">[pageHitBuilder setProperty:@&quot;pagePropertyKey2&quot; value:@&quot;pagePropertyValue2&quot;];</span><br><span class="line">ALBBMANTracker *tracker = [[ALBBMANAnalytics getInstance] getDefaultTracker];</span><br><span class="line">// 组装日志并发送</span><br><span class="line">[tracker send:[pageHitBuilder build]];</span><br></pre></td></tr></table></figure><ul><li>页面埋点与页面事件将影响控制台【页面路径分析】、【关键漏斗】、【控件点击】、【页面留存】等指标的报表展现，页面路径如下图所示。<img src="/images/2018/ios/page_path.png" class="fancybox fancybox"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;移动数据分析&quot;&gt;&lt;a href=&quot;#移动数据分析&quot; class=&quot;headerlink&quot; title=&quot;移动数据分析&quot;&gt;&lt;/a&gt;移动数据分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;获取&lt;a href=&quot;https://github.com/aliyun/alicloud-io
      
    
    </summary>
    
      <category term="ios" scheme="https://near2sea.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>ios上加AppStore异常</title>
    <link href="https://near2sea.github.io/2018/11/08/iosshang-jia-appstoreyi-chang/"/>
    <id>https://near2sea.github.io/2018/11/08/iosshang-jia-appstoreyi-chang/</id>
    <published>2018-11-08T01:32:34.000Z</published>
    <updated>2018-12-18T00:51:39.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="upload到appStore时xcode出来的异常信息"><a href="#upload到appStore时xcode出来的异常信息" class="headerlink" title="upload到appStore时xcode出来的异常信息"></a>upload到appStore时xcode出来的异常信息</h2><a id="more"></a><ul><li>正在上传<img src="/images/2018/ios/QQ20181108-100226.png" class="fancybox fancybox"></li><li>上传异常<img src="/images/2018/ios/QQ20181108-093001.png" class="fancybox fancybox"></li><li>苹果icon尺寸参考<ul><li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/icons-and-images/home-screen-icons/" target="_blank" rel="noopener">https://developer.apple.com/design/human-interface-guidelines/watchos/icons-and-images/home-screen-icons/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;upload到appStore时xcode出来的异常信息&quot;&gt;&lt;a href=&quot;#upload到appStore时xcode出来的异常信息&quot; class=&quot;headerlink&quot; title=&quot;upload到appStore时xcode出来的异常信息&quot;&gt;&lt;/a&gt;upload到appStore时xcode出来的异常信息&lt;/h2&gt;
    
    </summary>
    
      <category term="ios" scheme="https://near2sea.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue环境搭建</title>
    <link href="https://near2sea.github.io/2018/11/05/vuehuan-jing-da-jian/"/>
    <id>https://near2sea.github.io/2018/11/05/vuehuan-jing-da-jian/</id>
    <published>2018-11-05T04:20:23.000Z</published>
    <updated>2018-12-18T01:20:19.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vsCode插件安装"><a href="#vsCode插件安装" class="headerlink" title="vsCode插件安装"></a>vsCode插件安装</h2><ul><li>安装插件： <a href="https://zhangzhenfei.github.io/15337782581565.html" target="_blank" rel="noopener">https://zhangzhenfei.github.io/15337782581565.html</a></li></ul><a id="more"></a><h2 id="授权安装目录"><a href="#授权安装目录" class="headerlink" title="授权安装目录"></a>授权安装目录</h2><ul><li>执行<code>sudo chown -R $(whoami) /usr/local/lib</code>目录授权</li></ul><h3 id="安装nvm-node版本管理"><a href="#安装nvm-node版本管理" class="headerlink" title="安装nvm (node版本管理)"></a>安装nvm (node版本管理)</h3><ul><li><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code> #执行后添加nvm添加环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">=&gt; Profile not found. Tried ~/.bashrc, ~/.bash_profile, ~/.zshrc, and ~/.profile.</span><br><span class="line">=&gt; Create one of them and run this script again</span><br><span class="line">   OR</span><br><span class="line">=&gt; Append the following lines to the correct file yourself:</span><br><span class="line"></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line"></span><br><span class="line">=&gt; You currently have modules installed globally with `npm`. These will no</span><br><span class="line">=&gt; longer be linked to the active version of Node when you install a new node</span><br><span class="line">=&gt; with `nvm`; and they may (depending on how you construct your `$PATH`)</span><br><span class="line">=&gt; override the binaries of modules installed with `nvm`:</span><br><span class="line"></span><br><span class="line">/usr/local/lib</span><br><span class="line">├── @angular/cli@1.7.2</span><br><span class="line">├── @vue/cli@3.0.0-beta.2</span><br><span class="line">├── @vue/cli-init@3.0.0-beta.2</span><br><span class="line">├── ionic@3.19.1</span><br><span class="line">├── node-sass@4.7.2</span><br><span class="line">└── whistle@1.10.10</span><br><span class="line">=&gt; If you wish to uninstall them at a later point (or re-install them under your</span><br><span class="line">=&gt; `nvm` Nodes), you can remove them from the system Node as follows:</span><br><span class="line"></span><br><span class="line">     $ nvm use system</span><br><span class="line">     $ npm uninstall -g a_module</span><br><span class="line"></span><br><span class="line">=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:</span><br><span class="line"></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br></pre></td></tr></table></figure><ul><li>添加nvm到环境变量<ul><li><del>两个环境 <code>vim ~/.bash_profile</code>与<code>vim ~/.zshrc</code> 添加文档最末，重启shell</del></li><li>执行vi ~/.zshrc打开.zshrc,将<code>source $HOME/.bash_profile</code>粘贴到最下面，保存即可。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;</span><br></pre></td></tr></table></figure><ul><li><code>nvm ls-remote</code> 列表可安装的Node.js版本</li><li>执行 <code>nvm install 8.11.4</code> 安装node指定版本</li><li>执行 <code>nvm uninstall 8.11.4</code> 卸载node指定版本</li><li>执行 <code>nvm use 8.11.4</code> 设置shell的node版本</li><li><code>nvm deactivate</code> 还原环境变量PATH</li></ul><h4 id="nvmrc"><a href="#nvmrc" class="headerlink" title=".nvmrc"></a>.nvmrc</h4><ol><li><code>echo 6.2.1 &gt; .nvmrc</code> 它存储在工程根目录中，用于记录该工程依赖的Node.js版本</li><li>进入工程目录（当前目录），运行 <code>nvm use</code> ,将根据.nvmrc指定shell的Nodejs版本</li></ol><ul><li>执行<code>npm i -g cnpm</code>安装淘宝源</li></ul><h3 id="使用nrm安装"><a href="#使用nrm安装" class="headerlink" title="使用nrm安装"></a>使用nrm安装</h3><ul><li><code>npm install -g nrm</code> #安装nrm</li><li><code>nrm add syt http://npm.sythealth.com</code> #添加公司的npm镜像地址</li><li><code>nrm use syt</code> #使用公司npm地址</li><li><code>nrm ls</code>查看源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br><span class="line">* syt ---- http://npm.sythealth.com/</span><br></pre></td></tr></table></figure><h3 id="使用yarn安装"><a href="#使用yarn安装" class="headerlink" title="使用yarn安装"></a>使用yarn安装</h3><ul><li><code>npm i -g yarn</code> <em>yarn相当于是npm的升级</em></li><li><code>npm i -g yrm</code></li><li><code>yrm add syt http://npm.sythealth.com</code></li><li><code>yrm ls</code> #</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br><span class="line">  yarn --- https://registry.yarnpkg.com</span><br><span class="line">  syt ---- http://npm.sythealth.com/</span><br></pre></td></tr></table></figure><ul><li>yrm use syt</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  rednpm - http://registry.mirror.cqupt.edu.cn/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br><span class="line">  yarn --- https://registry.yarnpkg.com</span><br><span class="line">* syt ---- http://npm.sythealth.com/</span><br></pre></td></tr></table></figure><ul><li>进入项目根目录</li><li>执行 <figure class="highlight plain"><figcaption><span>安装项目依赖</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 执行下面安装chromedriver谷歌驱动</span><br></pre></td></tr></table></figure></li></ul><p>npm install chromedriver –chromedriver_cdnurl=<a href="http://cdn.npm.taobao.org/dist/chromedriver" target="_blank" rel="noopener">http://cdn.npm.taobao.org/dist/chromedriver</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 解决项目安装chromedriver失败问题</span><br><span class="line"></span><br><span class="line">* 使用npm解决方式</span><br></pre></td></tr></table></figure></p><p>npm config set chromedriver_cdnurl=<a href="http://cdn.npm.taobao.org/dist/chromedriver" target="_blank" rel="noopener">http://cdn.npm.taobao.org/dist/chromedriver</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 使用yarn解决方式</span><br></pre></td></tr></table></figure></p><p>yarn config set “chromedriver_cdnurl” “<a href="https://npm.taobao.org/mirrors/chromedriver&quot;" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/chromedriver&quot;</a><br><code>`</code></p><h3 id="APPStore安装Helm-切换host环境"><a href="#APPStore安装Helm-切换host环境" class="headerlink" title="APPStore安装Helm,切换host环境"></a>APPStore安装Helm,切换host环境</h3><h3 id="chrome浏览器安装vue插件"><a href="#chrome浏览器安装vue插件" class="headerlink" title="chrome浏览器安装vue插件"></a>chrome浏览器安装vue插件</h3><h3 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h3><ul><li><code>npm run dev</code> #启动项目</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vsCode插件安装&quot;&gt;&lt;a href=&quot;#vsCode插件安装&quot; class=&quot;headerlink&quot; title=&quot;vsCode插件安装&quot;&gt;&lt;/a&gt;vsCode插件安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装插件： &lt;a href=&quot;https://zhangzhenfei.github.io/15337782581565.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhangzhenfei.github.io/15337782581565.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://near2sea.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue 应用性能优化指南</title>
    <link href="https://near2sea.github.io/2018/10/31/vue-ying-yong-xing-neng-you-hua-zhi-nan/"/>
    <id>https://near2sea.github.io/2018/10/31/vue-ying-yong-xing-neng-you-hua-zhi-nan/</id>
    <published>2018-10-31T10:33:02.000Z</published>
    <updated>2018-12-18T00:51:39.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-应用性能优化指南"><a href="#Vue-应用性能优化指南" class="headerlink" title="Vue 应用性能优化指南"></a>Vue 应用性能优化指南</h2><p>得益于 Vue 的 <strong>响应式系统</strong> 和 <strong>虚拟 DOM 系统</strong> ，Vue 在渲染组件的过程中能自动追踪数据的依赖，并精确知晓数据更新的时候哪个组件需要重新渲染，渲染之后也会经过虚拟 DOM diff 之后才会真正更新到 DOM 上，Vue 应用的开发者一般不需要做额外的优化工作。</p><p>但在实践中仍然有可能遇到性能问题，下面会介绍一些定位分析 Vue 应用性能问题的方式及一些优化的建议。</p><a id="more"></a><img src="/images/2018/vue/64173-83026f2841daf0bc.png" class="fancybox fancybox"><p>整体内容由三部分组成：</p><ul><li>如何定位 Vue 应用性能问题</li><li>Vue 应用运行时性能优化建议</li><li>Vue 应用加载性能优化建议</li></ul><h2 id="1-如何定位-Vue-应用性能问题"><a href="#1-如何定位-Vue-应用性能问题" class="headerlink" title="1. 如何定位 Vue 应用性能问题"></a>1. 如何定位 Vue 应用性能问题</h2><p>Vue 应用的性能问题可以分为两个部分，第一部分是运行时性能问题，第二部分是加载性能问题。</p><p>和其他 web 应用一样，定位 Vue 应用性能问题最好的工具是 Chrome Devtool，通过 Performance 工具可以用来录制一段时间的 CPU 占用、内存占用、FPS 等运行时性能问题，通过 Network 工具可以用来分析加载性能问题。</p><img src="/images/2018/vue/64173-3fd396ec87391307.png" class="fancybox"><p>例如，通过 Performance 工具的 Bottom Up 标签我们可以看出一段时间内耗时最多的操作，这对于优化 CPU 占用和 FPS 过低非常有用，可以看出最为耗时的操作发生在哪里，可以知道具体函数的执行时间，定位到瓶颈之后，我们就可以做一些针对性的优化。</p><img src="/images/2018/vue/64173-1c8610b571d99b52.png" class="fancybox"><h2 id="2-Vue-应用运行时性能优化建议"><a href="#2-Vue-应用运行时性能优化建议" class="headerlink" title="2. Vue 应用运行时性能优化建议"></a>2. Vue 应用运行时性能优化建议</h2><p>运行时性能主要关注 Vue 应用初始化之后对 CPU、内存、本地存储等资源的占用，以及对用户交互的及时响应。下面是一些有用的优化手段：</p><h3 id="2-1-引入生产环境的-Vue-文件"><a href="#2-1-引入生产环境的-Vue-文件" class="headerlink" title="2.1 引入生产环境的 Vue 文件"></a>2.1 引入生产环境的 Vue 文件</h3><p>开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。而在生产环境下，这些警告语句没有用，反而会增加应用的体积。有些警告检查还有一些小的运行时开销。</p><p>当使用 webpack 或 Browserify 类似的构建工具时，Vue 源码会根据 process.env.NODE_ENV 决定是否启用生产环境模式，默认情况为开发环境模式。在 webpack 与 Browserify 中都有方法来覆盖此变量，以启用 Vue 的生产环境模式，同时在构建过程中警告语句也会被压缩工具去除</p><h3 id="2-2-使用单文件组件预编译模板"><a href="#2-2-使用单文件组件预编译模板" class="headerlink" title="2.2 使用单文件组件预编译模板"></a>2.2 使用单文件组件预编译模板</h3><p>当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。</p><p>预编译模板最简单的方式就是使用单文件组件——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。</p><p>详细的做法请参阅 <a href="https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91" target="_blank" rel="noopener">预编译模板</a></p><h3 id="2-3-提取组件的-CSS-到单独到文件"><a href="#2-3-提取组件的-CSS-到单独到文件" class="headerlink" title="2.3 提取组件的 CSS 到单独到文件"></a>2.3 提取组件的 CSS 到单独到文件</h3><p>当使用单文件组件时，组件内的 CSS 会以 <code>&lt;style&gt;</code> 标签的方式通过 JavaScript 动态注入。这有一些小小的运行时开销，将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。</p><p>查阅这个构建工具各自的文档来了解更多：</p><ul><li><a href="https://vue-loader-v14.vuejs.org/zh-cn/configurations/extract-css.html" target="_blank" rel="noopener">webpack + vue-loader</a> (vue-cli 的 webpack 模板已经预先配置好)</li><li><a href="https://github.com/vuejs/vueify#css-extraction" target="_blank" rel="noopener">Browserify + vueify</a></li><li><a href="https://rollup-plugin-vue.vuejs.org/#/en/2.3/?id=custom-handler" target="_blank" rel="noopener">Rollup + rollup-plugin-vue</a></li></ul><h3 id="2-4-利用Object-freeze-提升性能"><a href="#2-4-利用Object-freeze-提升性能" class="headerlink" title="2.4 利用Object.freeze()提升性能"></a>2.4 利用<code>Object.freeze()</code>提升性能</h3><p><code>Object.freeze()</code> 可以冻结一个对象，冻结之后不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</p><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 <code>data</code> 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter，这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p><p>但 Vue 在遇到像 <code>Object.freeze()</code> 这样被设置为不可配置之后的对象属性时，不会为对象加上 setter getter 等数据劫持的方法。参考 <a href="https://github.com/vuejs/vue/blob/v2.5.17/src/core/observer/index.js?1535281657346#L134" target="_blank" rel="noopener">Vue 源码</a></p><h3 id="2-5-扁平化-Store-数据结构"><a href="#2-5-扁平化-Store-数据结构" class="headerlink" title="2.5 扁平化 Store 数据结构"></a>2.5 扁平化 Store 数据结构</h3><p>很多时候，我们会发现接口返回的信息是如下的深层嵌套的树形结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Paul"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"My awesome blog post"</span>,</span><br><span class="line">  <span class="attr">"comments"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"324"</span>,</span><br><span class="line">      <span class="attr">"commenter"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Nicole"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如直接把这样的结构存储在 store 中，如果想修改某个 commenter 的信息，我们需要一层层去遍历找到这个用户的信息，同时有可能这个用户的信息出现了多次，还需要把其他地方的用户信息也进行修改，每次遍历的过程会带来额外的性能开销。</p><p>假设我们把用户信息在 store 内统一存放成 <code>users[id]</code>这样的结构，修改和读取用户信息的成本就变得非常低。</p><p>你可以手动去把接口里的信息通过类似数据的表一样像这样存起来，也可以借助一些工具，这里就需要提到一个概念叫做 JSON数据规范化（normalize）, Normalizr 是一个开源的工具，可以将上面的深层嵌套的 JSON 对象通过定义好的 schema 转变成使用 id 作为字典的实体表示的对象。</p><p>举个例子，针对上面的 JSON 数据，我们定义 <code>users</code> <code>comments</code> <code>articles</code> 三种 schema：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;normalize, schema&#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 users schema</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 comments schema</span></span><br><span class="line"><span class="keyword">const</span> comment = <span class="keyword">new</span> schema.Entity(<span class="string">'comments'</span>, &#123;</span><br><span class="line">  commenter: user,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 articles schema</span></span><br><span class="line"><span class="keyword">const</span> article = <span class="keyword">new</span> schema.Entity(<span class="string">'articles'</span>, &#123;</span><br><span class="line">  author: user,</span><br><span class="line">  comments: [comment],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> normalizedData = normalize(originalData, article);</span><br></pre></td></tr></table></figure><p>normalize 之后就可以得到下面的数据，我们可以按照这种形式存放在 store 中，之后想修改和读取某个 id 的用户信息就变得非常高效了，时间复杂度降低到了 O(1)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  result: <span class="string">"123"</span>,</span><br><span class="line">  entities: &#123;</span><br><span class="line">    <span class="string">"articles"</span>: &#123;</span><br><span class="line">      <span class="string">"123"</span>: &#123;</span><br><span class="line">        id: <span class="string">"123"</span>,</span><br><span class="line">        author: <span class="string">"1"</span>,</span><br><span class="line">        title: <span class="string">"My awesome blog post"</span>,</span><br><span class="line">        comments: [ <span class="string">"324"</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"users"</span>: &#123;</span><br><span class="line">      <span class="string">"1"</span>: &#123; <span class="string">"id"</span>: <span class="string">"1"</span>, <span class="string">"name"</span>: <span class="string">"Paul"</span> &#125;,</span><br><span class="line">      <span class="string">"2"</span>: &#123; <span class="string">"id"</span>: <span class="string">"2"</span>, <span class="string">"name"</span>: <span class="string">"Nicole"</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"comments"</span>: &#123;</span><br><span class="line">      <span class="string">"324"</span>: &#123; <span class="attr">id</span>: <span class="string">"324"</span>, <span class="string">"commenter"</span>: <span class="string">"2"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要了解更多请参考 normalizr 的文档 <a href="https://github.com/paularmstrong/normalizr" target="_blank" rel="noopener">https://github.com/paularmstrong/normalizr</a></p><h3 id="2-6-避免持久化-Store-数据带来的性能问题"><a href="#2-6-避免持久化-Store-数据带来的性能问题" class="headerlink" title="2.6 避免持久化 Store 数据带来的性能问题"></a>2.6 避免持久化 Store 数据带来的性能问题</h3><p>当你有让 Vue App 离线可用，或者有接口出错时候进行灾备的需求的时候，你可能会选择把 Store 数据进行持久化，这个时候需要注意以下几个方面：</p><h4 id="2-6-1-持久化时写入数据的性能问题"><a href="#2-6-1-持久化时写入数据的性能问题" class="headerlink" title="2.6.1 持久化时写入数据的性能问题"></a>2.6.1 持久化时写入数据的性能问题</h4><p>Vue 社区中比较流行的 vuex-persistedstate，利用了 store 的 subscribe 机制，来订阅 Store 数据的 mutation，如果发生了变化，就会写入 storage 中，默认用的是 localstorage 作为持久化存储。</p><p>也就是说默认情况下每次 commit 都会向 localstorage 写入数据，localstorage 写入是同步的，而且存在不小的性能开销，如果你想打造 60fps 的应用，就必须避免频繁写入持久化数据</p><p>下面是开发环境下通过 Performance 工具抓取的一个截图，可以看到出现了一次长达 6s 的卡顿：</p><p>6秒钟的卡顿<br><img src="/images/2018/vue/64173-da955401a4194a88.png" class="fancybox fancybox"></p><p>通过 Bottom-Up 可以看到 setState 占用了 3241.4ms 的 CPU 执行时间，而 setState 正是在向 Storage 写入数据。</p><p>vuex-persistedstate setState 源码<br><img src="/images/2018/vue/64173-f3f6cf2dda0a071f.png" class="fancybox fancybox"></p><p>我们应该尽量减少直接写入 Storage 的频率：</p><p>多次写入操作合并为一次，比如采用函数节流或者将数据先缓存在内存中，最后在一并写入<br>只有在必要的时候才写入，比如只有关心的模块的数据发生变化的时候才写入</p><h4 id="2-6-2-避免持久化存储的容量持续增长"><a href="#2-6-2-避免持久化存储的容量持续增长" class="headerlink" title="2.6.2 避免持久化存储的容量持续增长"></a>2.6.2 避免持久化存储的容量持续增长</h4><p>由于持久化缓存的容量有限，比如 localstorage 的缓存在某些浏览器只有 5M，我们不能无限制的将所有数据都存起来，这样很容易达到容量限制，同时数据过大时，读取和写入操作会增加一些性能开销，同时内存也会上涨。</p><p>尤其是将 API 数据进行 normalize 数据扁平化后之后，会将一份数据散落在不同的实体上，下次请求到新的数据也会散落在其他不同的实体上，这样会带来持续的存储增长。</p><p>因此，当设计了一套持久化的数据缓存策略的时候，同时应该设计旧数据的缓存清除策略，例如请求到新数据的时候将旧的实体逐个进行清除。</p><h3 id="2-7-优化无限列表性能"><a href="#2-7-优化无限列表性能" class="headerlink" title="2.7 优化无限列表性能"></a>2.7 优化无限列表性能</h3><p>如果你的应用存在非常长或者无限滚动的列表，那么采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。</p><p><a href="https://github.com/tangbc/vue-virtual-scroll-list" target="_blank" rel="noopener">vue-virtual-scroll-list</a> 和 <a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener">vue-virtual-scroller</a> 都是解决这类问题的开源项目。你也可以参考 Google 工程师的文章<a href="https://developers.google.com/web/updates/2016/07/infinite-scroller" target="_blank" rel="noopener">Complexities of an Infinite Scroller</a> 来尝试自己实现一个虚拟的滚动列表来优化性能，主要使用到的技术是 DOM 回收、墓碑元素和滚动锚定。</p><p><strong>Google 工程师绘制的无限列表设计</strong><br><img src="/images/2018/vue/64173-92a90dc8debdba8f.png" class="fancybox fancybox"></p><h3 id="2-8-通过组件懒加载优化超长应用内容初始渲染性能"><a href="#2-8-通过组件懒加载优化超长应用内容初始渲染性能" class="headerlink" title="2.8 通过组件懒加载优化超长应用内容初始渲染性能"></a>2.8 通过组件懒加载优化超长应用内容初始渲染性能</h3><p>上面提到的无限列表的场景，比较适合列表内元素非常相似的情况，不过有时候，你的 Vue 应用的超长列表内的内容往往不尽相同，例如在一个复杂的应用的主界面中，整个主界面由非常多不同的模块组成，而用户看到的往往只有首屏一两个模块。在初始渲染的时候不可见区域的模块也会执行和渲染，带来一些额外的性能开销。</p><p>使用组件懒加载在不可见时只需要渲染一个骨架屏，不需要真正渲染组件</p><img src="/images/2018/vue/64173-b1e4d3533ac49930.jpeg" class="fancybox fancybox center"><p>你可以对组件直接进行懒加载，对于不可见区域的组件内容，直接不进行加载和初始化，避免初始化渲染运行时的开销。具体可以参考我们之前的专栏文章 性能优化之组件懒加载: <a href="https://juejin.im/post/59bf501ff265da06602971b9" target="_blank" rel="noopener">Vue Lazy Component</a> 介绍，了解如何做到组件粒度的懒加载。</p><h2 id="3-Vue-应用加载性能优化建议"><a href="#3-Vue-应用加载性能优化建议" class="headerlink" title="3. Vue 应用加载性能优化建议"></a>3. Vue 应用加载性能优化建议</h2><h3 id="3-1-利用服务端渲染（SSR）和预渲染（Prerender）来优化加载性能"><a href="#3-1-利用服务端渲染（SSR）和预渲染（Prerender）来优化加载性能" class="headerlink" title="3.1 利用服务端渲染（SSR）和预渲染（Prerender）来优化加载性能"></a>3.1 利用服务端渲染（SSR）和预渲染（Prerender）来优化加载性能</h3><p>在一个单页应用中，往往只有一个 html 文件，然后根据访问的 url 来匹配对应的路由脚本，动态地渲染页面内容。单页应用比较大的问题是首屏可见时间过长。</p><p>单页面应用显示一个页面会发送多次请求，第一次拿到 html 资源，然后通过请求再去拿数据，再将数据渲染到页面上。而且由于现在微服务架构的存在，还有可能发出多次数据请求才能将网页渲染出来，每次数据请求都会产生 RTT（往返时延），会导致加载页面的时间拖的很长。</p><p><strong>服务端渲染、预渲染和客户端渲染的对比</strong><br><img src="/images/2018/vue/64173-b1339f7c40809bdc.png" class="fancybox fancybox"></p><p>这种情况下可以采用服务端渲染（SSR）和预渲染（Prerender）来提升加载性能，这两种方案，用户读取到的直接就是网页内容，由于少了节省了很多 RTT（往返时延），同时，还可以对一些资源内联在页面，可以进一步提升加载的性能。</p><p>可以参考我们的专栏文章 优化向：单页应用多路由预渲染指南 了解如何利用预渲染进行优化。</p><p>服务端渲染（SSR）可以考虑使用 Nuxt 或者按照 Vue 官方提供的 Vue SSR 指南来一步步搭建。</p><h4 id="3-2-通过组件懒加载优化超长应用内容加载性能"><a href="#3-2-通过组件懒加载优化超长应用内容加载性能" class="headerlink" title="3.2 通过组件懒加载优化超长应用内容加载性能"></a>3.2 通过组件懒加载优化超长应用内容加载性能</h4><p>在上面提到的超长应用内容的场景中，通过组件懒加载方案可以优化初始渲染的运行性能，其实，这对于优化应用的加载性能也很有帮助。</p><p>组件粒度的懒加载结合异步组件和 webpack 代码分片，可以保证按需加载组件，以及组件依赖的资源、接口请求等，比起通常单纯的对图片进行懒加载，更进一步的做到了按需加载资源。</p><p>使用组件懒加载之前的请求瀑布图<br><img src="/images/2018/vue/64173-595046cd9d293f92.jpeg" class="fancybox"></p><p><strong>使用组件懒加载之后的请求瀑布图</strong></p><img src="/images/2018/vue/64173-2f30674b8e0baae2.jpeg" class="fancybox"><p>使用组件懒加载方案对于超长内容的应用初始化渲染很有帮助，可以减少大量必要的资源请求，缩短渲染关键路径，具体做法请参考我们之前的专栏文章 性能优化之组件懒加载: Vue Lazy Component 介绍。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文总结了 Vue 应用运行时以及加载时的一些性能优化措施，下面做一个回顾和概括：</p><ul><li><p>Vue 应用运行时性能优化措施</p><ul><li>引入生产环境的 Vue 文件</li><li>使用单文件组件预编译模板</li><li>提取组件的 CSS 到单独到文件</li><li>利用Object.freeze()提升性能</li><li>扁平化 Store 数据结构</li><li>合理使用持久化 Store 数据</li><li>组件懒加载</li></ul></li></ul><ul><li>Vue 应用加载性能优化措施<ul><li>服务端渲染 / 预渲染</li><li>组件懒加载</li></ul></li></ul><h2 id="文章出处"><a href="#文章出处" class="headerlink" title="文章出处"></a>文章出处</h2><p><a href="https://www.jianshu.com/p/b768dc3bff35" target="_blank" rel="noopener">Vue 应用性能优化指南</a>作者：binggg_xunlei</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-应用性能优化指南&quot;&gt;&lt;a href=&quot;#Vue-应用性能优化指南&quot; class=&quot;headerlink&quot; title=&quot;Vue 应用性能优化指南&quot;&gt;&lt;/a&gt;Vue 应用性能优化指南&lt;/h2&gt;&lt;p&gt;得益于 Vue 的 &lt;strong&gt;响应式系统&lt;/strong&gt; 和 &lt;strong&gt;虚拟 DOM 系统&lt;/strong&gt; ，Vue 在渲染组件的过程中能自动追踪数据的依赖，并精确知晓数据更新的时候哪个组件需要重新渲染，渲染之后也会经过虚拟 DOM diff 之后才会真正更新到 DOM 上，Vue 应用的开发者一般不需要做额外的优化工作。&lt;/p&gt;
&lt;p&gt;但在实践中仍然有可能遇到性能问题，下面会介绍一些定位分析 Vue 应用性能问题的方式及一些优化的建议。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://near2sea.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>授权苹果健康</title>
    <link href="https://near2sea.github.io/2018/10/29/shou-quan-ping-guo-jian-kang/"/>
    <id>https://near2sea.github.io/2018/10/29/shou-quan-ping-guo-jian-kang/</id>
    <published>2018-10-29T09:56:18.000Z</published>
    <updated>2018-12-18T00:51:39.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>HealthKit框架提供了一个结构，应用可以使用它来分享健康和健身数据。HealthKit管理从不同来源获得的数据，并根据用户的偏好设置，自动将不同来源的所有数据合并起来。应用还可以获取每个来源的原始数据，然后执行自己的数据合并。</p></blockquote><blockquote><p>HealthKit另外提供了一个应用来帮助管理用户的健康数据。健康应用为用户展示HealthKit的数据。用户可以使用健康应用来查看、添加、删除或者管理其全部的健康和健身数据。用户还可以编辑每种数据类型的分享权限。</p></blockquote><a id="more"></a><h2 id="使用HealthKit特别注意"><a href="#使用HealthKit特别注意" class="headerlink" title="使用HealthKit特别注意"></a>使用HealthKit特别注意</h2><ol><li><p>应用不应该将HealthKit收集的数据用于广告或类似的服务。<em>注意，在使用HealthKit框架应用中可以插播广告，但是你不能使用HealthKit中的数据来服务广告。</em></p></li><li><p>在没有用户的明确允许下，你不能向第三方展示任何HealthKit收集的数据。即使用户允许，你也只能向提供健康或健身服务的第三方展示这些数据。</p></li><li><p>你不能将HealthKit收集的数据出售给广告平台、数据代理人或者信息经销商。</p></li><li><p>如果用户允许，你可以将HealthKit数据共享给第三方用于医学研究。注意是用户允许</p></li><li><p>必须明确说明，你和你的应用会怎样使用用户的HealthKit数据。</p></li></ol><h2 id="应用中使用了HealthKit-上-App-Store-特别注意"><a href="#应用中使用了HealthKit-上-App-Store-特别注意" class="headerlink" title="应用中使用了HealthKit 上 App Store 特别注意"></a>应用中使用了HealthKit 上 App Store 特别注意</h2><ol><li>一定要添加隐私政策网址链接,并注明健康数据使用的隐私相关条例。例如：<ul><li>在App里您设置身高、体重时，根据您之前是否允许授权权限，XXX将依据您给的权限是否把信息写入苹果健康应用。</li><li>在App里同步计步、睡眠、心率数据时，根据您之前是否允许授权权限，XXX将依据您给的权限是否把信息写入苹果健康应用。</li></ul></li><li>应用介绍中一定要注明：此版本支持你使用Apple健康应用程序<ul><li>审核详情请参考 App Store Review Guidelines中的HealthKit章节。</li></ul></li></ol><h2 id="HealthKit-存储理念"><a href="#HealthKit-存储理念" class="headerlink" title="HealthKit 存储理念"></a>HealthKit 存储理念</h2><blockquote><p>框架大量使用了子类化，在相似的类间创建层级关系。通常这些类间都有一些细微但是重要的差别。还有不少和它相关的类，需要正确搭配,才能一起工作。存储在HealthKit中的数据都是由对象和对象所属类型组成,这个概念一定要刻入脑海,你才能理解整个存储结构。所有对象都是基于<a href="https://developer.apple.com/documentation/healthkit/hkobject#//apple_ref/occ/cl/HKObject" target="_blank" rel="noopener">HKObject</a>，所有对象所属的类型都是基于<a href="https://developer.apple.com/documentation/healthkit/hkobjecttype#//apple_ref/occ/cl/HKObjectType" target="_blank" rel="noopener">HKObjectType</a>。下面简单介绍下这两个类:</p></blockquote><ul><li><code>HKObject</code>我们不能直接使用,而是使用它的子类。子类有:<ul><li>样本对象是某个特定时间断的数据。所有的样本对象都是<code>HKSample</code>的子类。它们都有下列属性：<ul><li><code>sampleType</code>: 样本类型。例如：一个睡眠分析样本、一个身高样本或者一个计步样本。</li><li><code>startDate</code> : 样本的开始时间。</li><li><code>endDate</code> : 样本的结束时间。</li></ul></li></ul></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><em>注意</em></h2><p>bugly异常分析中看到，但项目的Info.plist文件已经添加了NSHealthUpdateUsageDescription，但还是会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSHealthUpdateUsageDescription must be set in the app&apos;s Info.plist in order to request write authorization for the following types: HKQuantityTypeIdentifierBodyMassIndex, HKQuantityTypeIdentifierActiveEnergyBurned, HKWorkoutTypeIdentifier</span><br></pre></td></tr></table></figure></p><p>处理方法：</p><ol><li>先把Info.plist中的key值为NSHealthUpdateUsageDescription删掉</li><li>重新Info.plist中添加NSHealthUpdateUsageDescription并加上文字描述，OK!</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;HealthKit框架提供了一个结构，应用可以使用它来分享健康和健身数据。HealthKit管理从不同来源获得的数据，并根据用户的偏好设置，自动将不同来源的所有数据合并起来。应用还可以获取每个来源的原始数据，然后执行自己的数据合并。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;HealthKit另外提供了一个应用来帮助管理用户的健康数据。健康应用为用户展示HealthKit的数据。用户可以使用健康应用来查看、添加、删除或者管理其全部的健康和健身数据。用户还可以编辑每种数据类型的分享权限。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ios" scheme="https://near2sea.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Octopress插件使用</title>
    <link href="https://near2sea.github.io/2018/10/26/gist-tagshi-yong/"/>
    <id>https://near2sea.github.io/2018/10/26/gist-tagshi-yong/</id>
    <published>2018-10-26T04:17:16.000Z</published>
    <updated>2018-12-18T00:51:39.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="octopress插件使用"><a href="#octopress插件使用" class="headerlink" title="octopress插件使用"></a>octopress插件使用</h1><h2 id="codeblock插件"><a href="#codeblock插件" class="headerlink" title="codeblock插件"></a>codeblock插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Awesome code snippet</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote><blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote><h3 id="发邮件反馈插件"><a href="#发邮件反馈插件" class="headerlink" title="发邮件反馈插件"></a>发邮件反馈插件</h3><ul><li><a href="https://getsimpleform.com/" target="_blank" rel="noopener">https://getsimpleform.com/</a></li></ul><h3 id="集成图表"><a href="#集成图表" class="headerlink" title="集成图表"></a>集成图表</h3><ul><li><a href="http://mostlyblather.com/blog/2015/05/23/mermaid-jekyll-octopress/" target="_blank" rel="noopener">http://mostlyblather.com/blog/2015/05/23/mermaid-jekyll-octopress/</a></li></ul><h3 id="octopress转到hexo"><a href="#octopress转到hexo" class="headerlink" title="octopress转到hexo"></a>octopress转到hexo</h3><ul><li><a href="https://changchen.me/blog/20180807/octopress-to-hexo/" target="_blank" rel="noopener">https://changchen.me/blog/20180807/octopress-to-hexo/</a></li></ul><h3 id="octopress集成OTC"><a href="#octopress集成OTC" class="headerlink" title="octopress集成OTC"></a>octopress集成OTC</h3><ul><li><a href="https://github.com/dafi/jekyll-toc-generator" target="_blank" rel="noopener">https://github.com/dafi/jekyll-toc-generator</a></li></ul><h4 id="安装nokogiri"><a href="#安装nokogiri" class="headerlink" title="安装nokogiri"></a>安装nokogiri</h4><ol><li>To use tocGenerator.rb you need <a href="http://www.nokogiri.org/" target="_blank" rel="noopener">nokogiri</a></li><li>copy the file tocGenerator.rb into the _plugins folder</li><li>copy the file css/toc.css to you css site and include into _layouts (this is recommended but not necessary)</li><li>finished</li></ol><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight html"><figcaption><span>source/_layout/default.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This css contains the default style for TOC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"css/toc.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; content | toc_generate &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装category插件"><a href="#安装category插件" class="headerlink" title="安装category插件"></a>安装category插件</h3><ul><li>创建文件 <em>category_list.rb</em>，放在pluginss目录下</li></ul><figure class="highlight ruby"><figcaption><span>plugins/category_list.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Jekyll</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CategoryCloud</span> &lt; Liquid::Tag</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(tag_name, markup, tokens)</span></span></span><br><span class="line">      @opts = &#123;&#125;</span><br><span class="line">      <span class="keyword">if</span> markup.strip =~ <span class="regexp">/\s*counter:(\w+)/iu</span></span><br><span class="line">        @opts[<span class="string">'counter'</span>] = ($1 == <span class="string">'true'</span>)</span><br><span class="line">        markup = markup.strip.sub(<span class="regexp">/counter:\w+/iu</span>,<span class="string">''</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">super</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(context)</span></span></span><br><span class="line">      lists = &#123;&#125;</span><br><span class="line">      max, min = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">      config = context.registers[<span class="symbol">:site</span>].config</span><br><span class="line">      category_dir = config[<span class="string">'root'</span>] + config[<span class="string">'category_dir'</span>] + <span class="string">'/'</span></span><br><span class="line">      categories = context.registers[<span class="symbol">:site</span>].categories</span><br><span class="line">      categories.keys.sort_by&#123; <span class="params">|str|</span> str.downcase &#125;.each <span class="keyword">do</span> <span class="params">|category|</span></span><br><span class="line">        count = categories[category].count</span><br><span class="line">        lists[category] = count</span><br><span class="line">        max = count <span class="keyword">if</span> count &gt; max</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      html = <span class="string">''</span></span><br><span class="line">      lists.each <span class="keyword">do</span> <span class="params">| category, counter |</span></span><br><span class="line">        url = category_dir + category.to_url.gsub(<span class="regexp">/_|\P&#123;Word&#125;/u</span>, <span class="string">'-'</span>).gsub(<span class="regexp">/-&#123;2,&#125;/u</span>, <span class="string">'-'</span>).downcase</span><br><span class="line">        style = <span class="string">"font-size: <span class="subst">#&#123;<span class="number">100</span> + (<span class="number">60</span> * Float(counter)/max)&#125;</span>%"</span></span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;a href='<span class="subst">#&#123;url&#125;</span>' style='<span class="subst">#&#123;style&#125;</span>'&gt;<span class="subst">#&#123;category&#125;</span>"</span></span><br><span class="line">        <span class="keyword">if</span> @opts[<span class="string">'counter'</span>]</span><br><span class="line">          html &lt;&lt; <span class="string">"(<span class="subst">#&#123;categories[category].count&#125;</span>)"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;/a&gt; "</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      html</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CategoryList</span> &lt; Liquid::Tag</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(tag_name, markup, tokens)</span></span></span><br><span class="line">      @opts = &#123;&#125;</span><br><span class="line">      <span class="keyword">if</span> markup.strip =~ <span class="regexp">/\s*counter:(\w+)/iu</span></span><br><span class="line">        @opts[<span class="string">'counter'</span>] = ($1 == <span class="string">'true'</span>)</span><br><span class="line">        markup = markup.strip.sub(<span class="regexp">/counter:\w+/iu</span>,<span class="string">''</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">super</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(context)</span></span></span><br><span class="line">      html = <span class="string">""</span></span><br><span class="line">      config = context.registers[<span class="symbol">:site</span>].config</span><br><span class="line">      category_dir = config[<span class="string">'root'</span>] + config[<span class="string">'category_dir'</span>] + <span class="string">'/'</span></span><br><span class="line">      categories = context.registers[<span class="symbol">:site</span>].categories</span><br><span class="line">      categories.keys.sort_by&#123; <span class="params">|str|</span> str.downcase &#125;.each <span class="keyword">do</span> <span class="params">|category|</span></span><br><span class="line">        url = category_dir + category.to_url.gsub(<span class="regexp">/_|\P&#123;Word&#125;/u</span>, <span class="string">'-'</span>).gsub(<span class="regexp">/-&#123;2,&#125;/u</span>, <span class="string">'-'</span>).downcase</span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;li&gt;&lt;a href='<span class="subst">#&#123;url&#125;</span>'&gt;<span class="subst">#&#123;category&#125;</span>"</span></span><br><span class="line">        <span class="keyword">if</span> @opts[<span class="string">'counter'</span>]</span><br><span class="line">          html &lt;&lt; <span class="string">" (<span class="subst">#&#123;categories[category].count&#125;</span>)"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;/a&gt;&lt;/li&gt;"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      html</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Liquid::Template.register_tag(<span class="string">'category_cloud'</span>, Jekyll::CategoryCloud)</span><br><span class="line">Liquid::Template.register_tag(<span class="string">'category_list'</span>, Jekyll::CategoryList)</span><br></pre></td></tr></table></figure><ul><li>在目录<em>source/_includes/custom/asides</em> 创建<em>category_list.html</em></li></ul><figure class="highlight html"><figcaption><span>category_list.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"category-list"</span>&gt;</span>&#123; % category_list counter:true % &#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改根目录下的<em>_config.yml</em>文件</li></ul><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_asides:</span> <span class="string">[...,</span> <span class="string">custom/asides/category_list.html]</span></span><br></pre></td></tr></table></figure><ul><li>在目录<em>blog/categories/</em> 创建 <em>all.html</em></li></ul><figure class="highlight html"><figcaption><span>all.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: page</span><br><span class="line">title: "categories"</span><br><span class="line">footer: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123; % category_list [counter:true] % &#125;</span><br></pre></td></tr></table></figure><ul><li>修改目录<em>source/_includes/custom/navigation.html</em>文件，增加一个分类入口 </li></ul><figure class="highlight html"><figcaption><span>source/_includes/custom/navigation.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"main-navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; root_url &#125;&#125;/"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; root_url &#125;&#125;/blog/archives"</span>&gt;</span>Archives<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 增加分类入口 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; root_url &#125;&#125;/blog/categories/all.html"</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;octopress插件使用&quot;&gt;&lt;a href=&quot;#octopress插件使用&quot; class=&quot;headerlink&quot; title=&quot;octopress插件使用&quot;&gt;&lt;/a&gt;octopress插件使用&lt;/h1&gt;&lt;h2 id=&quot;codeblock插件&quot;&gt;&lt;a href=&quot;#codeblock插件&quot; class=&quot;headerlink&quot; title=&quot;codeblock插件&quot;&gt;&lt;/a&gt;codeblock插件&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Awesome code snippet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="插件" scheme="https://near2sea.github.io/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>EasyReact初识</title>
    <link href="https://near2sea.github.io/2018/10/25/dai-ma-pian-duan-gao-liang/"/>
    <id>https://near2sea.github.io/2018/10/25/dai-ma-pian-duan-gao-liang/</id>
    <published>2018-10-25T02:03:04.000Z</published>
    <updated>2018-12-18T00:51:39.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="美团客户端响应式框架-EasyReact"><a href="#美团客户端响应式框架-EasyReact" class="headerlink" title="美团客户端响应式框架 EasyReact"></a>美团客户端响应式框架 EasyReact</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>EasyReact 是一款基于响应式编程范式的客户端开发框架，开发者可以使用此框架轻松地解决客户端的异步问题。</p><p>目前 EasyReact 已在美团和大众点评客户端的部分业务中实践，并且持续迭代了一年多的时间。近日，我们决定开源这个项目的 iOS Objective-C 语言部分，希望能够帮助更多的开发者不断探索更广泛的业务场景，也欢迎更多的社区的开发者跟我们一起加强 EasyReact 的功能。Github 的项目地址，参见 <a href="https://github.com/meituan/EasyReact" target="_blank" rel="noopener">https://github.com/meituan/EasyReact</a> 。<br><a id="more"></a></p><h2 id="响应式编程的学习门槛"><a href="#响应式编程的学习门槛" class="headerlink" title="响应式编程的学习门槛"></a>响应式编程的学习门槛</h2><p>前面已经分析过，单纯的响应式编程并不是特别的难以理解，而函数式编程才是造成高学习门槛的原因。因此 EasyReact 采用大家都熟知的面向对象编程进行设计，</p><p>想要了解代码，相对于函数式编程变得容易很多。</p><p>另外响应式编程基于数据流动，流动就会产生一个有向的流动网络图。在函数式编程中，网络图是使用闭包捕获来建立的，这样做非常不利于图的查找和遍历。而 EasyReact 选择在框架中使用图的数据结构，将数据流动的有向网络图抽象成有向有环图的节点和边。这样使得框架在运行过程中可以随时查询到节点和边的关系，详细内容可以参见 框架概述 。</p><p>另外对于已经熟悉了 ReactiveCocoa 的同学来说，我们也在数据的流动操作上基本实现了 ReactiveCocoa API。详细内容可以参见 基本操作 。更多的功能可以向我们提功能的 ISSUE ，也欢迎大家能够提 Pull Request 来共同建设 EasyReact。</p><h2 id="EasyReact的最佳实践"><a href="#EasyReact的最佳实践" class="headerlink" title="EasyReact的最佳实践"></a>EasyReact的最佳实践</h2><p>通常我们创建一个类，里面会包含很多的属性。在使用 EasyReact 时，我们通常会把这些属性包装为 <code>EZRNode</code> 并加上一个泛型。如：</p><figure class="highlight objc"><figcaption><span>SearchService.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SearchService</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) EZRMutableNode *param;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) EZRNode *result;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) EZRNode *error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这段代码展示了如何创建一个 WiKi 查询服务，该服务接收一个 <code>param</code> 参数，查询后会返回 <code>result</code> 或者 <code>error</code>。以下是实现部分：</p><figure class="highlight objc"><figcaption><span>SearchService.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SearchService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _param = [EZRMutableNode new];</span><br><span class="line">        EZRNode *resultNode = [_param flattenMap:^EZRNode * _Nullable(<span class="built_in">NSString</span> * _Nullable searchParam) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *queryKeyWord = [searchParam stringByAddingPercentEncodingWithAllowedCharacters:[<span class="built_in">NSCharacterSet</span>  URLQueryAllowedCharacterSet]];</span><br><span class="line">            <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"https://en.wikipedia.org/w/api.php?action=query&amp;titles=%@∝=revisions&amp;rvprop=content&amp;format=json&amp;formatversion=2"</span>, queryKeyWord]];</span><br><span class="line">            EZRMutableNode *returnedNode = [EZRMutableNode new];</span><br><span class="line">            [[<span class="built_in">NSURLSession</span> sharedSession] dataTaskWithURL:url completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">                <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    returnedNode.value = error;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">NSError</span> *serializationError;</span><br><span class="line">                    <span class="built_in">NSDictionary</span> *resultDictionary = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="number">0</span> error:&amp;serializationError];</span><br><span class="line">                    <span class="keyword">if</span> (serializationError) &#123;</span><br><span class="line">                        returnedNode.value = serializationError;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!([resultDictionary[<span class="string">@"query"</span>][<span class="string">@"pages"</span>] count] &amp;&amp; !resultDictionary[<span class="string">@"query"</span>][<span class="string">@"pages"</span>][<span class="number">0</span>][<span class="string">@"missing"</span>])) &#123;</span><br><span class="line">                        <span class="built_in">NSError</span> *notFoundError = [<span class="built_in">NSError</span> errorWithDomain:<span class="string">@"com.example.service.wiki"</span> code:<span class="number">100</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span>: [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"keyword '%@' not found."</span>, searchParam]&#125;];</span><br><span class="line">                        returnedNode.value = notFoundError;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        returnedNode.value = resultDictionary;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">            <span class="keyword">return</span> returnedNode;</span><br><span class="line">        &#125;];</span><br><span class="line">        EZRIFResult *resultAnalysedNode = [resultNode <span class="keyword">if</span>:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable next) &#123;</span><br><span class="line">            <span class="keyword">return</span> [next isKindOfClass:<span class="built_in">NSDictionary</span>.class];</span><br><span class="line">        &#125;];</span><br><span class="line">        _result = resultAnalysedNode.thenNode;</span><br><span class="line">        _error = resultAnalysedNode.elseNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在调用时，我们只需要通过 <code>listenedBy</code> 方法关注节点的变化：</p><figure class="highlight objc"><figcaption><span>ViewController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.service = [SearchService new];</span><br><span class="line">[[<span class="keyword">self</span>.service.result listenedBy:<span class="keyword">self</span>] withBlock:^(<span class="built_in">NSDictionary</span> * _Nullable next) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Result: %@"</span>, next);</span><br><span class="line">&#125;];</span><br><span class="line">[[<span class="keyword">self</span>.service.error listenedBy:<span class="keyword">self</span>] withBlock:^(<span class="built_in">NSError</span> * _Nullable next) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Error: %@"</span>, next);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.service.param.value = <span class="string">@"mipmap"</span>; <span class="comment">//should print search result</span></span><br><span class="line"><span class="keyword">self</span>.service.param.value = <span class="string">@"420v"</span>; <span class="comment">// should print error, keyword not found.</span></span><br></pre></td></tr></table></figure><p>使用 EasyReact 后，网络请求的参数、结果和错误可以很好地被分离。不需要像命令式的写法那样在网络请求返回的回调中写一堆判断来分离结果和错误。</p><p>因为节点的存在先于结果，我们能对暂时还没有得到的结果构建连接关系，完成整个响应链的构建。响应链构建之后，一旦有了数据，数据便会自动按照我们预期的构建来传递。</p><p>在这个例子中，我们不需要显式地来调用网络请求，只需要给响应链中的 param 节点赋值，框架就会主动触发网络请求，并且请求完成之后会根据网络返回结果来分离出 result 和 error 供上层业务直接使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;美团客户端响应式框架-EasyReact&quot;&gt;&lt;a href=&quot;#美团客户端响应式框架-EasyReact&quot; class=&quot;headerlink&quot; title=&quot;美团客户端响应式框架 EasyReact&quot;&gt;&lt;/a&gt;美团客户端响应式框架 EasyReact&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;EasyReact 是一款基于响应式编程范式的客户端开发框架，开发者可以使用此框架轻松地解决客户端的异步问题。&lt;/p&gt;
&lt;p&gt;目前 EasyReact 已在美团和大众点评客户端的部分业务中实践，并且持续迭代了一年多的时间。近日，我们决定开源这个项目的 iOS Objective-C 语言部分，希望能够帮助更多的开发者不断探索更广泛的业务场景，也欢迎更多的社区的开发者跟我们一起加强 EasyReact 的功能。Github 的项目地址，参见 &lt;a href=&quot;https://github.com/meituan/EasyReact&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/meituan/EasyReact&lt;/a&gt; 。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建Octopress</title>
    <link href="https://near2sea.github.io/2018/10/24/da-jian-octopress/"/>
    <id>https://near2sea.github.io/2018/10/24/da-jian-octopress/</id>
    <published>2018-10-24T04:07:05.000Z</published>
    <updated>2018-12-18T00:51:39.393Z</updated>
    
    <content type="html"><![CDATA[<p>在Github上像是写代码一样写博客有一段时间了，有必要把搭建博客的方法整理一下，方便更多的人DIY，享受一下“博客驱动开发”。</p><img src="/images/2018/logo.png"><a id="more"></a><p><a href="http://octopress.org/" target="_blank" rel="noopener">Octopress</a>是<a href="http://brandonmathis.com/" target="_blank" rel="noopener">Brandon Mathis</a>在<a href="http://github.com/mojombo/jekyll" target="_blank" rel="noopener">Jekyll</a>上开发的，利用<a href="http://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>来展示静态页面。</p><p>正如Octopress网站所说的</p><blockquote><p>Octopress is a blogging framework for hackers. You should be comfortable running shell commands and familiar with the basics of Git.</p></blockquote><p>所以如果你不喜欢这种方式，可以选择其他博客平台或框架，毕竟工具就是为了让我们效率最大化而不是造成困惑。</p><p>本文是基于OS X系统进行介绍的。</p><p>##准备工作</p><ol><li><p>安装Git。</p></li><li><p>安装Ruby 1.9.3。</p></li></ol><p>在Mac上使用<a href="http://brew.sh/" target="_blank" rel="noopener">brew</a>安装Git：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure><p>同样的，使用brew安装<a href="https://github.com/sstephenson/rbenv" target="_blank" rel="noopener">rbenv</a>之后，使用rbenv安装所需要的Ruby版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install rbenv</span><br><span class="line">$ rbenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure><p>安装好后可以进行验证：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git version</span><br><span class="line">$ rbenv version</span><br></pre></td></tr></table></figure></p><p>##搭建博客</p><p>首先使用Git将Octopress从Github上clone到本地：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:imathis/octopress.git octopress</span><br><span class="line">$ <span class="built_in">cd</span> octopress</span><br></pre></td></tr></table></figure><p>紧接着，安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gem install bundler</span><br><span class="line">$ rbenv <span class="built_in">rehash</span></span><br><span class="line">$ bundle install</span><br></pre></td></tr></table></figure><p>安装默认的Octopress主题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake install</span><br></pre></td></tr></table></figure><p>##选择博客主题</p><p>有很多第三方的Octopress主题可供选择——<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" target="_blank" rel="noopener">3rd Party Octopress Themes</a>。</p><p>通过<code>git submodule add</code>将需要的主题项目加为子模块，接着安装主题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add GIT_URL .themes/THEME_NAME</span><br><span class="line">$ rake install[<span class="string">'THEME_NAME'</span>]</span><br><span class="line">$ rake generate</span><br></pre></td></tr></table></figure><p>我的博客使用的是<code>whiterspace</code>主题。</p><p>##配置博客</p><p>正如Octopress的作者所说的，大部分情况下只需要修改<code>Rakefile</code>和<code>_config.yml</code>就可以了。其中<code>Rakefile</code>是和部署有关的，除非你使用rsync，否则不需要动它。</p><p>在<code>_config.yml</code>中，需要对三个部分进行配置。</p><p>###主要配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url:                <span class="comment"># For rewriting urls for RSS, etc</span></span><br><span class="line">title:              <span class="comment"># Used in the header and title tags</span></span><br><span class="line">subtitle:           <span class="comment"># A description used in the header</span></span><br><span class="line">author:             <span class="comment"># Your name, for RSS, Copyright, Metadata</span></span><br><span class="line">simple_search:      <span class="comment"># Search engine for simple site search</span></span><br><span class="line">description:        <span class="comment"># A default meta description for your site</span></span><br><span class="line">date_format:        <span class="comment"># Format dates using Ruby's date strftime syntax</span></span><br><span class="line">subscribe_rss:      <span class="comment"># Url for your blog's feed, defauts to /atom.xml</span></span><br><span class="line">subscribe_email:    <span class="comment"># Url to subscribe by email (service required)</span></span><br><span class="line">category_feeds:     <span class="comment"># Enable per category RSS feeds (defaults to false in 2.1)</span></span><br><span class="line">email:              <span class="comment"># Email address for the RSS feed if you want it.</span></span><br></pre></td></tr></table></figure><p>###Jekyll和Plugins</p><p>这是和Jekyll和Plugins有关的，详情见<a href="http://octopress.org/docs/configuring/" target="_blank" rel="noopener">Configuring Octopress</a>。</p><p>###第三方组件</p><p>这些第三方组件是包含在Octopress中的，只需要配置好就可以添加到自己的博客中。</p><ul><li><p>Github：在sidebar中列出你的Github Repo。</p></li><li><p>Twitter：添加一个分享到Twitter的按钮。</p></li><li><p>Google Plus One：设置分享到Google +1。</p></li><li><p>Pinboard：在sidebar中分享你最近的<a href="https://pinboard.in/" target="_blank" rel="noopener">Pinboard</a>书签。</p></li><li><p>Delicious：在sidebar中分享你最近的<a href="https://delicious.com/" target="_blank" rel="noopener">Delicious</a>书签。</p></li><li><p>Disqus Comments：访问<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>，创建好账号登录后点击<code>Settings</code>，点击<code>Admin</code>，就可以为个人博客站点创建一个short name，把它添加到<code>_config.yml</code>中的<code>disqus_short_name</code>后面就可以在个人博客中使用Disqus进行评论。</p></li><li><p>Google Analytics：在<a href="http://www.google.com/analytics/" target="_blank" rel="noopener">Google Analytics</a>中获取跟踪ID，把它添加到<code>_config.yml</code>中的<code>google_analytics_tracking_id</code>后面就可以使用Google Analytics对个人博客进行分析统计。</p></li><li><p>Facebook：添加Facebook<code>like</code>按钮。</p></li></ul><p>##部署博客</p><p>###使用Github User/Organization pages</p><p>Github的<a href="http://pages.github.com/" target="_blank" rel="noopener">Pages service</a>允许我们为自己的Repo创建展示页面。我们使用<code>http://USER_NAME.github.io</code>作为博客的地址，当然你也可以使用自己的域名（<a href="http://octopress.org/docs/deploying/github/#custom_domains" target="_blank" rel="noopener">怎么做</a>）。</p><p>首先，我们在Github上新建一个Repo，把它命名为<code>USER_NAME.github.io</code>，其中<code>USER_NAME</code>是你在Github上的用户名。这是为了把<code>master</code>branch作为web server，使用<code>http://USER_NAME.github.io</code>链接展示你的页面。也就是说你需要在<code>source</code>branch上进行工作，并把生成的内容push到<code>master</code>branch上。</p><p>如果你觉的这些好麻烦，没事，Octopress会用一个配置task来帮助你把它们做好：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake setup_github_pages</span><br></pre></td></tr></table></figure><p>这个rake task会问你要Github Repo的URL。把上面我们新建的Repo的SSH或者HTTPS URL复制到这里（e.g. <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:USER_NAME/USER_NAME.github.io.git）。</p><p>接着，它会为你做以下这些：</p><ul><li><p>存储你的Github Pages仓库URL。</p></li><li><p>把指向imathis/octopress的remote由<code>origin</code>重命名为<code>octopress</code>。</p></li><li><p>把你的Github Pages仓库作为默认的<code>origin</code>remote。</p></li><li><p>把<code>active</code>branch从<code>master</code>切换到<code>source</code>。</p></li><li><p>使你的博客URL与你的仓库一致。</p></li><li><p>在<code>_deploy</code>文件夹中设置一个<code>master</code>branch用来部署。</p></li></ul><p>紧接着运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rake generate</span><br><span class="line">$ rake deploy</span><br></pre></td></tr></table></figure><p><code>rake generate</code>会把<code>source</code>文件夹下面的markdown文件编译为html文件，并复制到<code>public</code>文件夹下，因此<code>public</code>下的结构跟<code>source</code>的一致，里边的内容为最终的静态页面。</p><p><code>rake deploy</code>会将生成的静态页面复制到<code>_deploy</code>文件夹下并把它们添加到git，commit然后push到Github Pages仓库的<code>master</code>branch上。</p><p>最后用浏览器打开<code>http://USER_NAME.github.io</code>，你就会看见自己的博客了。首次push可能会花费一段时间等待Github为你生成页面。</p><p>当然不要忘记把更改的文件push到<code>source</code>branch上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'YOUR_MESSAGE'</span></span><br><span class="line">$ git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>###使用Github Project pages (gh-pages)</p><p>Github的Project Pages服务允许你为你的已存在的Repo提供一个站点。它会在你的Repo中寻找<code>gh-pages</code>branch，把上面的内容在这个链接中展示<code>http://USER_NAME.github.io/REPO_NAME</code>。</p><p>和上面步骤一致，只不过在运行<code>rake setup_github_pages</code>后输入的是已存在Repo的URL。</p><p>这个的好处是可以把<code>http://USER_NAME.github.io</code>留下来以后再使用，比如个人主页什么的。</p><p>##开始写博客</p><p>###博客</p><p>博客存储在<code>source/_posts</code>文件夹中，并按照Jekyll的惯例进行命名: <code>YYYY-MM-DD-post-title.markdown</code>。文件的名字会被用作URL的一部分，日期会用来对文件进行区分和排序。</p><p>Octopress提供一个rake task来生成一篇新的博客：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake new_post[<span class="string">"NEW_TITLE"</span>]</span><br></pre></td></tr></table></figure><p>创建好的文件默认是<code>.markdown</code>格式。</p><p>用编辑器打开一篇博客，开头的<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="noopener">Front Matter</a>会告诉Jekyll如何处理博客和页面。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: <span class="string">"POST_TITLE"</span></span><br><span class="line">date: POST_DATA</span><br><span class="line">comments: <span class="literal">true</span></span><br><span class="line">external-url:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>你可以关闭评论也可以为博客添加标签。如果还在打草稿，可以添加<code>published: false</code>以免它在生成文件时被发布。你可以添加一个标签也可以添加多个标签：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># One category</span></span><br><span class="line">categories: Sass</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple categories example 1</span></span><br><span class="line">categories: [CSS3, Sass, Media Queries]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple categories example 2</span></span><br><span class="line">categories:</span><br><span class="line">- CSS3</span><br><span class="line">- Sass</span><br><span class="line">- Media Queries</span><br></pre></td></tr></table></figure><p>###内容</p><p>使用Markdown语法（<a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="noopener">语法说明</a>）来写博客，也可以使用<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers" target="_blank" rel="noopener">liquid template features</a> 。</p><p>###生成和预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rake generate   <span class="comment"># Generates posts and pages into the public directory</span></span><br><span class="line">$ rake watch      <span class="comment"># Watches source/ and sass/ for changes and regenerates</span></span><br><span class="line">$ rake preview    <span class="comment"># Watches, and mounts a webserver at http://localhost:4000</span></span><br></pre></td></tr></table></figure><p><code>rake preview</code>是一个很好的功能，在发布博客之前可以先预览一下在页面的效果，进行修正。</p><p>##其他好玩的</p><p>###为博客添加返回页面顶部的功能</p><p><a href="http://www.scrolltotop.com/" target="_blank" rel="noopener">Scroll To Top</a>这个网站提供了很多返回页面顶部的Widget。</p><p>在<code>source/_includes/custom</code>文件夹下新建一个<code>scroll_to_top.html</code>的HTML文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://arrow.scrolltotop.com/YOUR_CHOICE.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>接着在<code>source/_layouts/default.html</code>中引入该文件：</p><p>此时博客在右下角添加了一个返回页面顶部的button。</p><p>当然也可以在<code>source/javascripts</code>文件夹下保存使用到的javascript文件，直接在<code>scroll_to_top.html</code>中调用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/javascripts/FILE_NAME.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>制作属于自己的button。</p><p>###在首页添加“继续阅读”按钮</p><p>在博客中插入<code>&lt;!-- more --&gt;</code>后，在博客首页上，会把该标记之下的博客内容隐藏，点击<code>Read on →</code>按钮可以看到整篇博客。</p><p>###使用个性化的Favicon</p><p>在<code>source</code>文件夹下将<code>favicon.png</code>替换成自己的图片。注意，需要使用16px×16px的图片，256色或24位，所以图片的内容不要太复杂。</p><p>##小结</p><p>在Github上写博客可以分享知识给其他人，同时也是一个督促自己学习的好方法，毕竟搭建网站需要维护，而Github把这些替你做了，让自己可以专注注意力。当然也请善用，要善对这个平台。</p><p>在搭建博客时如果有什么问题可以问我，水平有限，会尽力解答。</p><p><strong>参考文献</strong></p><ol><li><p><a href="http://octopress.org/" target="_blank" rel="noopener">Octopress</a></p></li><li><p><a href="http://beyondvincent.com/2013/08/03/2013-08-03-108-creating-a-github-blog-using-octopress/" target="_blank" rel="noopener">利用Octopress搭建一个Github博客</a></p></li><li><p><a href="http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-comments/" target="_blank" rel="noopener">Blogging With Octopress: Add Comments</a></p></li><li><p><a href="http://droidyue.com/blog/2014/08/03/integrate-scroll-to-top-in-octopress/" target="_blank" rel="noopener">Octopress添加回到顶部功能</a></p></li><li><p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" target="_blank" rel="noopener">3rd Party Octopress Themes</a></p></li><li><p><a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="noopener">Markdown 语法说明</a></p></li><li><p><a href="http://boxingp.github.io/blog/2015/03/29/create-personal-blog-in-github-by-using-octopress/" target="_blank" rel="noopener">Octopress 白色主题</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Github上像是写代码一样写博客有一段时间了，有必要把搭建博客的方法整理一下，方便更多的人DIY，享受一下“博客驱动开发”。&lt;/p&gt;
&lt;img src=&quot;/images/2018/logo.png&quot;&gt;
    
    </summary>
    
      <category term="Octopress" scheme="https://near2sea.github.io/categories/Octopress/"/>
    
    
  </entry>
  
</feed>
